// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  characters   Character[]
  chatSessions ChatSession[]
  apiKeys      ApiKey[]
  preferences  UserPreferences?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Character {
  id          String   @id @default(cuid())
  userId      String
  name        String
  data        Json     // Full character data
  portraitUrl String?
  isPublic    Boolean  @default(false)
  tags        String[] // For categorization and search
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatSessions ChatSession[]

  @@index([userId])
  @@index([name])
  @@index([isPublic])
  @@index([tags])
}

model ChatSession {
  id          String   @id @default(cuid())
  userId      String
  characterId String
  name        String   @default("New Conversation")
  messages    Json[]   // Chat history
  metadata    Json?    // Additional session data
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([characterId])
  @@index([updatedAt])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  key       String   @unique
  name      String   // "Unity Project", "Game X"
  scopes    String[] // ["characters:read", "chat:create"]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  lastUsed  DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique
  
  // Theme preferences
  theme  String @default("system") // "light", "dark", "system"
  
  // Generation preferences  
  defaultTextModel  String @default("gpt-4o-mini")
  defaultImageModel String @default("dall-e-2")
  
  // Privacy preferences
  allowPublicCharacters Boolean @default(false)
  allowDataCollection   Boolean @default(true)
  
  // Notification preferences
  emailNotifications Boolean @default(true)
  
  // Other preferences as JSON
  otherSettings Json @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageTracking {
  id       String @id @default(cuid())
  userId   String
  model    String // "gpt-4o", "dall-e-3", etc.
  count    Int    @default(0)
  monthKey String // "2025-01" format
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, model, monthKey])
  @@index([userId])
  @@index([monthKey])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  // Optional - some events may not have a user
  action    String   // e.g., "USER_LOGIN", "CHARACTER_CREATED", "DATA_EXPORT"
  resource  String?  // e.g., "character:123", "user:456"
  ip        String
  userAgent String
  success   Boolean
  details   Json?    // Additional context data
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([success])
}